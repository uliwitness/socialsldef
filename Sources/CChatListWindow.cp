#include "CChatListWindow.h"#include "CListManagerWindowAttachment.h"#include "CApplication.h"#include "SocialsLDEFData.h"#include "CStream.h"#include <string.h>#include <limits.h>#include <stdio.h>CChatListWindow::CChatListWindow(CCommandHandler* parent): CWindow(128, parent) {}void CChatListWindow::CreateWindow() {	CWindow::CreateWindow();		Rect listRect = mWindow->portRect;	listRect.top += 32;	listRect.bottom -= 15;	mList = new CListManagerWindowAttachment(this, &listRect, 700);	mList->SetAutoPositionFlags(kAutoPositionFlagResizeHorz | kAutoPositionFlagResizeVert);	mList->SetCommand('ldbl');	mList->SetAutoDraw(false);		const unsigned char *userNames[] = { "\pJill", "\pJenna", "\pJeaniene" };	const char *messages[] = { "Hey you there!", "Who, me?", "No, I think she means me." };		for (int x = 0; x < 3; ++x) {		int ptrLen = sizeof(struct SocialsEntry) - 1 + strlen(messages[x]);		struct SocialsEntry *socialsEntry = (struct SocialsEntry *) NewPtr(ptrLen);		CIconHandle theIcon = GetCIcon(128);		PixMapHandle avatarPixMap = NewPixMap();		Handle pixelData = (**theIcon).iconData;		HandToHand(&pixelData);		socialsEntry->avatarPixelData = pixelData;		CopyPixMap((PixMapHandle)theIcon, avatarPixMap);		socialsEntry->avatar = avatarPixMap; // TODO: Should dispose of this when list is destroyed.		BlockMoveData(userNames[x], socialsEntry->userName, userNames[x][0] + 1);		BlockMoveData(messages[x], socialsEntry->message, strlen(messages[x]));		mList->AddRow(socialsEntry, ptrLen);				DisposePtr((Ptr)socialsEntry);		DisposeCIcon(theIcon);	}					mList->SetAutoDraw(true);}void CChatListWindow::HandleCommand(OSType command, short menuID, short itemIndex) {	if (command == 'ldbl') {		// React to click?	} else {		CWindow::HandleCommand(command, menuID, itemIndex);	}}